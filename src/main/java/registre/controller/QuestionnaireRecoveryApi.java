/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package registre.controller;

import registre.dto.Metadata;
import registre.dto.QuestionnaireVariablesInner;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import javax.annotation.Generated;
import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-07-08T13:56:08.508051800+02:00[Europe/Paris]")
@Validated
@Tag(name = "Questionnaire Recovery", description = "Questionnaire Endpoints for recovery")
public interface QuestionnaireRecoveryApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /questionnaires/{questionnaireId}/capi-model : Retrieve capi questionnaire
     * Lunatic-Model (Capi) recovery
     *
     * @param questionnaireId  (required)
     * @return Lunatic Model for capi (status code 200)
     */
    @Operation(
        operationId = "getCapiQuestionnaireById",
        summary = "Retrieve capi questionnaire",
        description = "Lunatic-Model (Capi) recovery",
        tags = { "Questionnaire Recovery" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lunatic Model for capi", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/questionnaires/{questionnaireId}/capi-model",
        produces = { "application/json" }
    )
    default ResponseEntity<Object> getCapiQuestionnaireById(
        @Parameter(name = "questionnaireId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("questionnaireId") String questionnaireId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /questionnaires/{questionnaireId}/cawi-model : Retrieve cawi questionnaire
     * Lunatic-Model (Cawi) recovery
     *
     * @param questionnaireId  (required)
     * @return Lunatic Model for cawi (status code 200)
     */
    @Operation(
        operationId = "getCawiQuestionnaireById",
        summary = "Retrieve cawi questionnaire",
        description = "Lunatic-Model (Cawi) recovery",
        tags = { "Questionnaire Recovery" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lunatic Model for cawi", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/questionnaires/{questionnaireId}/cawi-model",
        produces = { "application/json" }
    )
    default ResponseEntity<Object> getCawiQuestionnaireById(
        @Parameter(name = "questionnaireId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("questionnaireId") String questionnaireId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /questionnaires/{questionnaireId}/codes-list : Retrieve list of codes-list required for questionnaire
     * List of codes-list
     *
     * @param questionnaireId  (required)
     * @return List of codes list metadata (status code 200)
     */
    @Operation(
        operationId = "getCodesListsQuestionnaireById",
        summary = "Retrieve list of codes-list required for questionnaire",
        description = "List of codes-list",
        tags = { "Questionnaire Recovery" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of codes list metadata", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Metadata.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/questionnaires/{questionnaireId}/codes-list",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Metadata>> getCodesListsQuestionnaireById(
        @Parameter(name = "questionnaireId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("questionnaireId") String questionnaireId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"externalLink\" : { \"uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"version\" : \"version\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"label\" : \"label\", \"version\" : \"version\" }, { \"externalLink\" : { \"uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"version\" : \"version\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"label\" : \"label\", \"version\" : \"version\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /questionnaires/{questionnaireId}/papi-model : Retrieve papi questionnaire
     * FO (papi) recovery
     *
     * @param questionnaireId  (required)
     * @return FO Model for papi (status code 200)
     */
    @Operation(
        operationId = "getPapiQuestionnaireById",
        summary = "Retrieve papi questionnaire",
        description = "FO (papi) recovery",
        tags = { "Questionnaire Recovery" },
        responses = {
            @ApiResponse(responseCode = "200", description = "FO Model for papi", content = {
                @Content(mediaType = "application/xml", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/questionnaires/{questionnaireId}/papi-model",
        produces = { "application/xml" }
    )
    default ResponseEntity<String> getPapiQuestionnaireById(
        @Parameter(name = "questionnaireId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("questionnaireId") String questionnaireId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /questionnaires/{questionnaireId}/variables : Retrieve variables of questionnaire
     * Get all variables of questionnaire
     *
     * @param questionnaireId  (required)
     * @return List of all variables in questionnaire (and their scope) (status code 200)
     */
    @Operation(
        operationId = "getVariablesQuestionnaireById",
        summary = "Retrieve variables of questionnaire",
        description = "Get all variables of questionnaire",
        tags = { "Questionnaire Recovery" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of all variables in questionnaire (and their scope)", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = QuestionnaireVariablesInner.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/questionnaires/{questionnaireId}/variables",
        produces = { "application/json" }
    )
    default ResponseEntity<List<QuestionnaireVariablesInner>> getVariablesQuestionnaireById(
        @Parameter(name = "questionnaireId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("questionnaireId") String questionnaireId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"dataType\" : \"{}\", \"scope\" : \"scope\", \"name\" : \"name\", \"id\" : \"id\" }, { \"dataType\" : \"{}\", \"scope\" : \"scope\", \"name\" : \"name\", \"id\" : \"id\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
