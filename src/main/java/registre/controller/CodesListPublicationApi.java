/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package registre.controller;

import registre.dto.CodesListDto;
import registre.dto.CodesListExternalLinkDto;
import registre.dto.ErrorResponseDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import javax.annotation.Generated;
import javax.validation.Valid;
import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-07-08T13:56:08.508051800+02:00[Europe/Paris]")
@Validated
@Tag(name = "Codes List Publication", description = "Codes List Endpoints for publication")
public interface CodesListPublicationApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /codes-lists : Create codes list (metadata only)
     * Admin only. Create a code list without content or search config. These must be added later via PUT endpoints. 
     *
     * @param codesListDto  (optional)
     * @return Created (status code 201)
     *         or Structured error (status code 409)
     */
    @Operation(
        operationId = "createCodesList",
        summary = "Create codes list (metadata only)",
        description = "Admin only. Create a code list without content or search config. These must be added later via PUT endpoints. ",
        tags = { "Codes List Publication" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created"),
            @ApiResponse(responseCode = "409", description = "Structured error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/codes-lists",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> createCodesList(
        @Parameter(name = "CodesListDto", description = "") @Valid @RequestBody(required = false) CodesListDto codesListDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /codes-lists/full : Create a full codes list (metadata + content + search config)
     * Convenience endpoint for complete creation.
     *
     * @param codesListDto  (optional)
     * @return Created (status code 201)
     */
    @Operation(
        operationId = "createFullCodesList",
        summary = "Create a full codes list (metadata + content + search config)",
        description = "Convenience endpoint for complete creation.",
        tags = { "Codes List Publication" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/codes-lists/full",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> createFullCodesList(
        @Parameter(name = "CodesListDto", description = "") @Valid @RequestBody(required = false) CodesListDto codesListDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /codes-lists/{codesListId}/content : Add content to a codes list
     *
     * @param codesListId  (required)
     * @param code  (optional)
     * @return Content set successfully (status code 201)
     *         or Structured error (status code 409)
     */
    @Operation(
        operationId = "putCodesListContentById",
        summary = "Add content to a codes list",
        tags = { "Codes List Publication" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Content set successfully"),
            @ApiResponse(responseCode = "409", description = "Structured error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/codes-lists/{codesListId}/content",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> putCodesListContentById(
        @Parameter(name = "codesListId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("codesListId") String codesListId,
        @Parameter(name = "Code", description = "") @Valid @RequestBody(required = false) List<CodeDto> code
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /codes-lists/{codesListId}/external-link : Set external link for a codes list
     *
     * @param codesListId  (required)
     * @param codesListExternalLink  (optional)
     * @return External link set successfully (status code 201)
     *         or Structured error (status code 409)
     */
    @Operation(
        operationId = "putCodesListExternalLinkById",
        summary = "Set external link for a codes list",
        tags = { "Codes List Publication" },
        responses = {
            @ApiResponse(responseCode = "201", description = "External link set successfully"),
            @ApiResponse(responseCode = "409", description = "Structured error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/codes-lists/{codesListId}/external-link",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> putCodesListExternalLinkById(
        @Parameter(name = "codesListId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("codesListId") String codesListId,
        @Parameter(name = "CodesListExternalLink", description = "") @Valid @RequestBody(required = false) CodesListExternalLinkDto codesListExternalLink
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /codes-lists/{codesListId}/search-configuration : Add search configuration to a codes list
     *
     * @param codesListId  (required)
     * @param body  (optional)
     * @return Search configuration set successfully (status code 201)
     *         or Structured error (status code 409)
     */
    @Operation(
        operationId = "putCodesListSearchConfigById",
        summary = "Add search configuration to a codes list",
        tags = { "Codes List Publication" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Search configuration set successfully"),
            @ApiResponse(responseCode = "409", description = "Structured error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/codes-lists/{codesListId}/search-configuration",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> putCodesListSearchConfigById(
        @Parameter(name = "codesListId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("codesListId") String codesListId,
        @Parameter(name = "body", description = "") @Valid @RequestBody(required = false) Object body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
