/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package registre.controller;

import registre.dto.ErrorResponseDto;
import registre.dto.QuestionnaireDto;
import registre.dto.QuestionnaireVariablesDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import javax.annotation.Generated;
import jakarta.validation.Valid;
import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-07-08T13:56:08.508051800+02:00[Europe/Paris]")
@Validated
@Tag(name = "Questionnaire Publication", description = "Questionnaire Endpoints for publication")
public interface QuestionnairePublicationApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /questionnaires : Publication of questionnaire metadata
     *
     * @param questionnaireDto  (optional)
     * @return Questionnaire initialized (status code 201)
     */
    @Operation(
        operationId = "postQuestionnaire",
        summary = "Publication of questionnaire metadata",
        tags = { "Questionnaire Publication" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Questionnaire initialized")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/questionnaires",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> postQuestionnaire(
        @Parameter(name = "QuestionnaireDto", description = "") @Valid @RequestBody(required = false) QuestionnaireDto questionnaireDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /questionnaires/{questionnaireId}/capi-model : Publication of capi questionnaire
     * Lunatic-Model (capi) publication
     *
     * @param questionnaireId  (required)
     * @param body  (optional)
     * @return Capi Questionnaire initialized (status code 201)
     *         or Structured error (status code 409)
     */
    @Operation(
        operationId = "putCapiQuestionnaireById",
        summary = "Publication of capi questionnaire",
        description = "Lunatic-Model (capi) publication",
        tags = { "Questionnaire Publication" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Capi Questionnaire initialized"),
            @ApiResponse(responseCode = "409", description = "Structured error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/questionnaires/{questionnaireId}/capi-model",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> putCapiQuestionnaireById(
        @Parameter(name = "questionnaireId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("questionnaireId") String questionnaireId,
        @Parameter(name = "body", description = "") @Valid @RequestBody(required = false) Object body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /questionnaires/{questionnaireId}/cawi-model : Publication of cawi questionnaire
     * Lunatic-Model (cawi) publication
     *
     * @param questionnaireId  (required)
     * @param body  (optional)
     * @return Questionnaire initialized (status code 201)
     *         or Structured error (status code 409)
     */
    @Operation(
        operationId = "putCawiQuestionnaireById",
        summary = "Publication of cawi questionnaire",
        description = "Lunatic-Model (cawi) publication",
        tags = { "Questionnaire Publication" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Questionnaire initialized"),
            @ApiResponse(responseCode = "409", description = "Structured error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/questionnaires/{questionnaireId}/cawi-model",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> putCawiQuestionnaireById(
        @Parameter(name = "questionnaireId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("questionnaireId") String questionnaireId,
        @Parameter(name = "body", description = "") @Valid @RequestBody(required = false) Object body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /questionnaires/{questionnaireId}/conceptual-model : Publication of conceptual-model of questionnaire
     * Pogues-Model publication
     *
     * @param questionnaireId  (required)
     * @param body  (optional)
     * @return Questionnaire initialized (status code 201)
     *         or Structured error (status code 409)
     */
    @Operation(
        operationId = "putConceptualModelQuestionnaireById",
        summary = "Publication of conceptual-model of questionnaire",
        description = "Pogues-Model publication",
        tags = { "Questionnaire Publication" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Questionnaire initialized"),
            @ApiResponse(responseCode = "409", description = "Structured error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/questionnaires/{questionnaireId}/conceptual-model",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> putConceptualModelQuestionnaireById(
        @Parameter(name = "questionnaireId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("questionnaireId") String questionnaireId,
        @Parameter(name = "body", description = "") @Valid @RequestBody(required = false) Object body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /questionnaires/{questionnaireId}/papi-model : Publication of papi questionnaire
     * FO (papi) publication
     *
     * @param questionnaireId  (required)
     * @param body  (optional)
     * @return Papi Questionnaire initialized (status code 201)
     *         or Structured error (status code 409)
     */
    @Operation(
        operationId = "putPapiQuestionnaireById",
        summary = "Publication of papi questionnaire",
        description = "FO (papi) publication",
        tags = { "Questionnaire Publication" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Papi Questionnaire initialized"),
            @ApiResponse(responseCode = "409", description = "Structured error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/questionnaires/{questionnaireId}/papi-model",
        produces = { "application/json" },
        consumes = { "application/xml" }
    )
    default ResponseEntity<Void> putPapiQuestionnaireById(
        @Parameter(name = "questionnaireId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("questionnaireId") String questionnaireId,
        @Parameter(name = "body", description = "") @Valid @RequestBody(required = false) String body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /questionnaires/{questionnaireId}/variables : Publication of variables of questionnaire
     * Pogues-Model publication
     *
     * @param questionnaireId  (required)
     * @param questionnaireVariables  (optional)
     * @return Variables of questionnaire initialized (status code 201)
     *         or Structured error (status code 409)
     */
    @Operation(
        operationId = "putVariablesQuestionnaireById",
        summary = "Publication of variables of questionnaire",
        description = "Pogues-Model publication",
        tags = { "Questionnaire Publication" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Variables of questionnaire initialized"),
            @ApiResponse(responseCode = "409", description = "Structured error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/questionnaires/{questionnaireId}/variables",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> putVariablesQuestionnaireById(
        @Parameter(name = "questionnaireId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("questionnaireId") String questionnaireId,
        @Parameter(name = "QuestionnaireVariables", description = "") @Valid @RequestBody(required = false) List<QuestionnaireVariablesDto> questionnaireVariables
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
